@page "/chat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Page.Client.Components
@using Page.Shared.Interfaces
@using Page.Shared.Models
@using Page.Shared.Services
@attribute [Authorize]
@inject PersistentComponentState ApplicationState
@inject NavigationManager Navigator
@inject InfoService Info
@inject IChatService ChatService


<ChatClient @bind-Messages="@Messages" />


@code {
    bool _isLoading = true;
    private PersistingComponentStateSubscription persistingSubscription;
    private const string messagesDataKey = "MessagesData";
    private string[] Messages;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<string[]>(messagesDataKey, out var restored))
        {
            Messages = await ChatService.GetValueAsync();
            _isLoading = false;
        }
        else
        {
            Messages = restored;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(messagesDataKey, Messages);

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = !OperatingSystem.IsBrowser();
            InvokeAsync(StateHasChanged);
        }
        await Task.CompletedTask;
    }

    async Task Send()
    {

        //hubConnection.SendAsync("SendMessage", model.Message);
        //model.Message = string.Empty;
    }

}
